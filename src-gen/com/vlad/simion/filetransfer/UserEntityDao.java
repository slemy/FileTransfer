package com.vlad.simion.filetransfer;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vlad.simion.filetransfer.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_ENTITY.
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirstName = new Property(1, String.class, "FirstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "LastName", false, "LAST_NAME");
        public final static Property Email = new Property(3, String.class, "Email", false, "EMAIL");
        public final static Property Workplace = new Property(4, String.class, "Workplace", false, "WORKPLACE");
        public final static Property ProfileImage = new Property(5, byte[].class, "ProfileImage", false, "PROFILE_IMAGE");
    };


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FIRST_NAME' TEXT," + // 1: FirstName
                "'LAST_NAME' TEXT," + // 2: LastName
                "'EMAIL' TEXT," + // 3: Email
                "'WORKPLACE' TEXT," + // 4: Workplace
                "'PROFILE_IMAGE' BLOB);"); // 5: ProfileImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FirstName = entity.getFirstName();
        if (FirstName != null) {
            stmt.bindString(2, FirstName);
        }
 
        String LastName = entity.getLastName();
        if (LastName != null) {
            stmt.bindString(3, LastName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(4, Email);
        }
 
        String Workplace = entity.getWorkplace();
        if (Workplace != null) {
            stmt.bindString(5, Workplace);
        }
 
        byte[] ProfileImage = entity.getProfileImage();
        if (ProfileImage != null) {
            stmt.bindBlob(6, ProfileImage);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FirstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Workplace
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5) // ProfileImage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWorkplace(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfileImage(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
